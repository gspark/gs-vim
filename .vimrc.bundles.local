" Plugin Config {
    if count(g:gsvim_bundle_groups, 'ui')
        " -> gruvbox
        if isdirectory(expand("~/.vim/bundle/gruvbox"))
            let g:gruvbox_italic = 1
        endif

        " -> airline
        if isdirectory(expand("~/.vim/bundle/vim-airline"))
            let g:airline_skip_empty_sections = 1
            let g:airline#extensions#tabline#enabled = 1
            " let g:airline#extensions#tmuxline#enabled = 1
            let g:airline#extensions#tabline#show_tabs = 1
            let g:airline#extensions#tabline#show_tab_nr = 1
            let g:airline#extensions#tabline#show_buffers = 1
            let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
            let g:airline#extensions#tabline#buffer_nr_show = 1
            " let g:airline#extensions#tabline#buffer_nr_format = '%s:'
            " let g:airline#extensions#tabline#fnamemod = ':t'
            " let g:airline#extensions#tabline#fnamecollapse = 1
            " let g:airline#extensions#tabline#fnametruncate = 0
            let g:airline#extensions#tabline#buffer_idx_mode = 1
            nmap <leader>1 <Plug>AirlineSelectTab1
            nmap <leader>2 <Plug>AirlineSelectTab2
            nmap <leader>3 <Plug>AirlineSelectTab3
            nmap <leader>4 <Plug>AirlineSelectTab4
            nmap <leader>5 <Plug>AirlineSelectTab5
            nmap <leader>6 <Plug>AirlineSelectTab6
            nmap <leader>7 <Plug>AirlineSelectTab7
            nmap <leader>8 <Plug>AirlineSelectTab8
            nmap <leader>9 <Plug>AirlineSelectTab9
            nmap <leader>- <Plug>AirlineSelectPrevTab
            nmap <leader>+ <Plug>AirlineSelectNextTab
            let g:Powerline_sybols = 'unicode'
            if g:gsvim_fancy_font
                let g:airline_powerline_fonts=1
                " let g:airline_left_sep = ''
                " let g:airline_left_alt_sep = ''
                " let g:airline_right_sep = ''
                " let g:airline_right_alt_sep = ''
                " let g:airline_symbols.branch = ''
                " let g:airline_symbols.readonly = ''
                " let g:airline_symbols.linenr = ''
                " let g:airline_symbols.maxlinenr= ''
            else
                let g:airline_left_sep = '▶'
                let g:airline_right_sep = '◀'
                let g:airline_symbols.crypt = '🔒'
                let g:airline_symbols.linenr = '¶'
                let g:airline_symbols.branch = '⎇'
                let g:airline_symbols.paste = '∥'
                let g:airline_symbols.notexists = '∄'
                let g:airline_symbols.whitespace = 'Ξ'
            endif
            " if exists("g:colors_name") && (g:colors_name=='gruvbox')
            "     let g:airline_theme = 'gruvbox'
            " else
            "     let g:airline_theme = 'bubblegum'
            " endif
            augroup Fix_airline_with_unite
                autocmd FileType unite AirlineRefresh
                autocmd FileType vimfiler AirlineRefresh
            augroup END
            ""let g:airline_section_y                            = "%{strlen(&fenc)>0?&fenc:''}%{&bomb?'(BOM)':''}%{strlen(&ff)>0?'['.&ff.']':''}[ASCII=\%03.3b][HEX=\%02.2b]"
            let g:airline_section_y                              = "%{strlen(&fenc)>0?&fenc:''}%{&bomb?'(BOM)':''}%{strlen(&ff)>0?'['.&ff.']':''}[ASCII=\%03.3b]"
        endif

        " -> lightline
        if isdirectory(expand("~/.vim/bundle/lightline.vim"))
            let g:lightline = {
                \ 'mode_map': { 'c': 'NORMAL' },
                \ 'active': {
                \   'left': [['mode', 'paste'], ['fugitive', 'filename']],
                \   'right': [['lineinfo'], ['charvalue','charvaluehex','percent'], ['fileformat', 'fileencoding', 'filetype']]
                \ },
                \ 'component': {
                \  'lineinfo': '' . '%3l:%-2v',
                \  'charvalue': '%b', 
                \  'charvaluehex': '%B'
                \ },
                \ 'component_function': {
                \   'readonly': 'LightlineReadonly',
                \   'fugitive': 'LightlineFugitive',
                \   'filename': 'LightlineFilename',
                \   'fileformat': 'LightlineFileformat',
                \   'filetype': 'LightlineFiletype',
                \   'fileencoding': 'LightlineFileencoding',
                \   'mode': 'LightlineMode',
                \ },
                \ 'separator': { 'left': '', 'right': '' },
                \ 'subseparator': { 'left': '', 'right': '' }
                \ }

            function! LightlineModified()
                return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
            endfunction

            function! LightlineReadonly()
                return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
            endfunction

            function! LightlineFilename()
                let fname = expand('%:t')
                return fname == 'ControlP' && has_key(g:lightline, 'ctrlp_item') ? g:lightline.ctrlp_item :
                        \ fname == '__Tagbar__' ? g:lightline.fname :
                        \ fname =~ '__Gundo\|NERD_tree' ? '' :
                        \ &ft == 'vimfiler' ? vimfiler#get_status_string() :
                        \ &ft == 'unite' ? unite#get_status_string() :
                        \ &ft == 'vimshell' ? vimshell#get_status_string() :
                        \ ('' != LightlineReadonly() ? LightlineReadonly() . ' ' : '') .
                        \ ('' != fname ? fname : '[No Name]') .
                        \ ('' != LightlineModified() ? ' ' . LightlineModified() : '')
            endfunction

            function! LightlineFugitive()
                try
                    if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
                        let mark = ''  " edit here for cool mark
                        let branch = fugitive#head()
                        return branch !=# '' ? mark.branch : ''
                    endif
                catch
                endtry
                return ''
            endfunction

            function! LightlineFileformat()
                return winwidth(0) > 70 ? &fileformat : ''
            endfunction

            function! LightlineFiletype()
                return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
            endfunction

            function! LightlineFileencoding()
                return winwidth(0) > 70 ? (&fenc !=# '' ? &fenc.(&bomb ? '(BOM)' : '') : &enc) : ''
            endfunction

            function! LightlineMode()
                let fname = expand('%:t')
                return fname == '__Tagbar__' ? 'Tagbar' :
                        \ fname == 'ControlP' ? 'CtrlP' :
                        \ fname == '__Gundo__' ? 'Gundo' :
                        \ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
                        \ fname =~ 'NERD_tree' ? 'NERDTree' :
                        \ &ft == 'unite' ? 'Unite' :
                        \ &ft == 'vimfiler' ? 'VimFiler' :
                        \ &ft == 'vimshell' ? 'VimShell' :
                        \ winwidth(0) > 60 ? lightline#mode() : ''
            endfunction

            let g:unite_force_overwrite_statusline = 0
            let g:vimfiler_force_overwrite_statusline = 0
            let g:vimshell_force_overwrite_statusline = 0
        endif

        " -> Indent Guides
        if isdirectory(expand("~/.vim/bundle/indentLine"))
            if !has('gui_running') && g:gsvim_default_scheme
                let g:indent_guides_auto_colors=0
                autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=235
                autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
            endif
            let g:indent_guides_enable_on_vim_startup=1
            let g:indent_guides_guide_size=1
            let g:indent_guides_default_mapping=0
            let g:indent_guides_exclude_filetypes=['help', 'nerdtree', 'startify', 'markdown']
        endif

        " -> Startify
        if isdirectory(expand("~/.vim/bundle/vim-startify"))
            let g:startify_custom_header=[
                \'                          _            ',
                \'  __ _  ___       __   __(_) _ __ ___  ',
                \' / _` |/ __| _____\ \ / /| || `_ ` _ \ ',
                \'| (_| |\__ \|_____|\ V / | || | | | | |',
                \' \__, ||___/        \_/  |_||_| |_| |_|',
                \' |___/                                 ',
                \'                                       ']
            let g:startify_custom_footer =
                        \ ['', "   Vim is charityware. Please read ':help uganda'.", '']
            let g:startify_relative_path = 1
            let g:startify_skiplist = [
                        \ '.git',
                        \ '.svn',
                        \ 'node_modules',
                        \ 'logs',
                        \ 'bower_components'
                        \ ]
            let g:startify_session_dir=$HOME . '/temp/session'
            if has('gui_running')
                hi StartifyHeader  guifg=#87afff
                hi StartifyFooter  guifg=#87afff
                hi StartifyBracket guifg=#585858
                hi StartifyNumber  guifg=#ffaf5f
                hi StartifyPath    guifg=#8a8a8a
                hi StartifySlash   guifg=#585858
            else
                hi StartifyHeader  ctermfg=111
                hi StartifyFooter  ctermfg=111
                hi StartifyBracket ctermfg=240
                hi StartifyNumber  ctermfg=215
                hi StartifyPath    ctermfg=245
                hi StartifySlash   ctermfg=240
                ""        hi StartifyHeader  ctermfg=114
                ""        hi StartifyFooter  ctermfg=240
                ""        hi StartifyBracket ctermfg=240
                ""        hi StartifyNumber  ctermfg=215
                ""        hi StartifyPath    ctermfg=245
                ""        hi StartifySlash   ctermfg=240
                hi StartifySpecial ctermfg=240
            endif
        endif

        " -> Goyo & Limelight
        if isdirectory(expand("~/.vim/bundle/limelight.vim"))
            autocmd! User GoyoEnter Limelight
            autocmd! User GoyoLeave Limelight!
        endif
    endif

    " Setting for enhancement Plugins
    if count(g:gsvim_bundle_groups, 'enhance')
        " -> delimitMate
        if isdirectory(expand("~/.vim/bundle/delimitMate"))
            let delimitMate_expand_cr=1
            let delimitMate_expand_space=1
            let delimitMate_balance_matchpairs=1
        endif

        " -> Tcomment
        " if isdirectory(expand("~/.vim/bundle/tcomment_vim"))
        "     " Map \<Space> to commenting
        "     function! IsWhiteLine()
        "         if (getline('.')=~'^$')
        "             exe 'TCommentBlock'
        "             normal! j
        "         else
        "             normal! A
        "             exe 'TCommentRight'
        "             normal! l
        "             normal! x
        "         endif
        "         startinsert!
        "     endfunction
        "     nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>
        " endif

        " -> Multiple cursors
        if isdirectory(expand("~/.vim/bundle/vim-multiple-cursors"))
            " Called once right before you start selecting multiple cursors
            if g:gsvim_autocomplete=='NEO'
                function! Multiple_cursors_before()
                    if g:gsvim_completion_engine=='neocomplete'
                        exe 'NeoCompleteLock'
                    else
                        exe 'NeoComplCacheLock'
                    endif
                endfunction
                " Called once only when the multiple selection is canceled (default <Esc>)
                function! Multiple_cursors_after()
                    if g:gsvim_completion_engine=='neocomplete'
                        exe 'NeoCompleteUnlock'
                    else
                        exe 'NeoComplCacheUnlock'
                    endif
                endfunction
            endif
            let g:multi_cursor_next_key='<C-n>'
            let g:multi_cursor_prev_key='<C-p>'
            let g:multi_cursor_skip_key='<C-x>'
            let g:multi_cursor_quit_key='<Esc>'
        endif

        " -> Undo tree
        if isdirectory(expand("~/.vim/bundle/undotree"))
            nnoremap <Leader>u :UndotreeToggle<CR>
            let g:undotree_SetFocusWhenToggle=1
        endif

        " -> Easy Align
        if isdirectory(expand("~/.vim/bundle/vim-easy-align"))
            xmap ga <Plug>(EasyAlign)
            nmap ga <Plug>(EasyAlign)
        endif

        " -> Gutentags
        if isdirectory(expand("~/.vim/bundle/vim-gutentags"))
            let g:gutentags_cache_dir=$HOME . '/temp/cache/ctags'
        endif

        " -> Splitjoin
        if isdirectory(expand("~/.vim/bundle/splitjoin.vim"))
            let g:splitjoin_split_mapping = ',s'
            let g:splitjoin_join_mapping  = ',j'
            let g:splitjoin_normalize_whitespace=1
            let g:splitjoin_align=1
        endif

        " -> Investigate.vim
        if isdirectory(expand("~/.vim/bundle/investigate.vim"))
            nnoremap K :call investigate#Investigate()<CR>
            let g:investigate_use_dash=1
        endif

        " -> EnhancedDiff
        if isdirectory(expand("~/.vim/bundle/vim-diff-enhanced"))
            let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
        endif

        " -> Tabularize
        if isdirectory(expand("~/.vim/bundle/tabular"))
            nmap <Leader>a& :Tabularize /&<CR>
            vmap <Leader>a& :Tabularize /&<CR>
            nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            nmap <Leader>a=> :Tabularize /=><CR>
            vmap <Leader>a=> :Tabularize /=><CR>
            nmap <Leader>a: :Tabularize /:<CR>
            vmap <Leader>a: :Tabularize /:<CR>
            nmap <Leader>a:: :Tabularize /:\zs<CR>
            vmap <Leader>a:: :Tabularize /:\zs<CR>
            nmap <Leader>a, :Tabularize /,<CR>
            vmap <Leader>a, :Tabularize /,<CR>
            nmap <Leader>a,, :Tabularize /,\zs<CR>
            vmap <Leader>a,, :Tabularize /,\zs<CR>
            nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        endif

        " -> vim-commentary
        if isdirectory(expand("~/.vim/bundle/vim-commentary" ))
            autocmd FileType python,shell set commentstring=#\ %s    " 设置Python注释字符
            autocmd FileType mako set cms=##\ %s
        endif
    endif

    " setting for moving Plugins
    if count(g:gsvim_bundle_groups, 'move')
        " -> Tag bar
        if isdirectory(expand("~/.vim/bundle/tagbar"))
            let g:tagbar_autofocus     = 0
            let g:tagbar_expand        = 0
            let g:tagbar_foldlevel     = 1
            let g:tagbar_autoshowtag   = 1
            ""let g:tagbar_width       = 20     not usage
            nnoremap <Leader>t :TagbarToggle<CR>
        endif

        " -> Matchit
        " Start mathit
        packadd! matchit
        " Use Tab instead of % to switch
        nmap <Tab> %
        vmap <Tab> %
    endif

    " Setting for navigation Plugins
    if count(g:gsvim_bundle_groups, 'navigate')
        " -> NERD Tree
        if isdirectory(expand("~/.vim/bundle/nerdtree"))
            nnoremap <Leader>f :NERDTreeToggle<CR>
            let NERDTreeChDirMode=2
            let NERDTreeShowBookmarks=1
            let NERDTreeShowHidden=1
            let NERDTreeShowLineNumbers=1
            augroup nerd_loader
                autocmd!
                autocmd VimEnter * silent! autocmd! FileExplorer
                autocmd BufEnter,BufNew *
                            \  if isdirectory(expand('<amatch>'))
                            \|   call plug#load('nerdtree')
                            \|   execute 'autocmd! nerd_loader'
                            \| endif
            augroup END
            " ColorFul NERDTree Settings
            let g:NERDTreeRespectWildIgnore=1
            let g:NERDTreeDirArrows=0
        endif
    endif

    " Setting for completion Plugins
    if count(g:gsvim_bundle_groups, 'complete')
        if g:gsvim_autocomplete=='NEO'
            " -> Neocomplete & Neocomplcache
            " Use Tab and S-Tab to select candidate
            inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
            inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
            if  g:gsvim_completion_engine == 'neocomplete'
                let g:neocomplete#data_directory=$HOME . '/temp/cache/neocomplete'
                let g:acp_enableAtStartup=1
                let g:neocomplete#enable_at_startup=1
                let g:neocomplete#enable_smart_case=1
                let g:neocomplete#enable_insert_char_pre=1
                let g:neocomplete#enable_multibyte_completion=1
                let g:neocomplete#sources#syntax#min_keyword_length=3
                let g:neocomplete#lock_buffer_name_pattern='\*ku\*'
                let g:neocomplete#enable_auto_select=1
                let g:neocomplete#enable_auto_delimiter=1
                let g:marching_enable_neocomplete=1
                let g:neocomplete#max_list=16
                let g:neocomplete#max_keyword_width=58
                if !exists('g:neocomplete#keyword_patterns')
                        let g:neocomplete#keyword_patterns = {}
                endif
                let g:neocomplete#keyword_patterns['default']='\h\w*'
                " Use <C-E> to close popup
                inoremap <expr><C-E> neocomplete#cancel_popup()
                inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
                            \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
                            \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
            else
                let g:neocomplcache_enable_at_startup=1
                let g:neocomplcache_temporary_dir=$HOME . '/temp/cache/neocomplcache'
                let g:neocomplcache_enable_auto_delimiter=1
                let g:neocomplcache_enable_fuzzy_completion=1
                " Use <C-E> to close popup
                inoremap <expr><C-E> neocomplcache#cancel_popup()
                inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
                            \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
                            \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
            endif

            " Setting for specific language
            if has('lua')
                if !exists('g:neocomplete#force_omni_input_patterns')
                    let g:neocomplete#force_omni_input_patterns={}
                endif
                let g:neocomplete#force_omni_input_patterns.python=
                \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            else
                if !exists('g:neocomplcache_force_omni_patterns')
                    let g:neocomplcache_force_omni_patterns={}
                endif
                let g:neocomplcache_force_omni_patterns.python=
                \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            endif
            autocmd FileType python setlocal omnifunc=jedi#completions
            let g:jedi#completions_enabled=0
            let g:jedi#auto_vim_configuration=0
            let g:jedi#smart_auto_mappings=0
            let g:jedi#use_tabs_not_buffers=1
            let g:tmuxcomplete#trigger=''
            " -> Neosnippet
            " Set information for snippets
            let g:neosnippet#enable_snipmate_compatibility=1
            let g:neosnippet#enable_complete_done = 1
            let g:neosnippet#completed_pairs= {}
            let g:neosnippet#completed_pairs.java = {'(' : ')'}
            if g:neosnippet#enable_complete_done
                let g:neopairs#enable = 0
            endif
            " Use <C-K> to expand or jump snippets in insert mode
            imap <C-K> <Plug>(neosnippet_expand_or_jump)
            " Use <C-K> to replace TARGET within snippets in visual mode
            xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
            """ For snippet_complete marker
            if has('conceal')
                set conceallevel=2 concealcursor=i
            endif
            " FileType Cheacker
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            " autocmd FileType javascript setlocal omnifunc=javacriptcomplete#CompleteJS
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

            if !exists('g:neocomplete#sources#omni#input_patterns')
                    let g:neocomplete#sources#omni#input_patterns={}
            endif
            let g:neocomplete#ctags_command="ctags"
            let g:neocomplete#sources#omni#input_patterns.c='[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplete#sources#omni#input_patterns.cpp='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::\w*'
        else
            " -> UltiSnips
            let g:UltiSnipsExpandTrigger="<C-K>"
            let g:UltiSnipsJumpForwardTrigger="<Tab>"
            let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
        endif

        " Setting info for snips
        let g:snips_author=g:gsvim_user
        let g:snips_email=g:gsvim_email
        let g:snips_github=g:gsvim_github

    endif

    " -> compiling Plugins
    if count(g:gsvim_bundle_groups, 'compile')
        " " -> Syntastic
        " if isdirectory(expand("~/.vim/bundle/syntastic"))
        " let g:syntastic_error_symbol = '✗'
        " let g:syntastic_warning_symbol = '∆'
        " let g:syntastic_style_error_symbol = '✗'
        " let g:syntastic_style_warning_symbol = '∆'
        "     ""let g:syntastic_javascript_checkers = ['jshint', 'jsl', 'jslint', 'jscs']
        "     let g:syntastic_javascript_checkers = ['jshint', 'jscs']
        "     ""let g:syntastic_javascript_checkers = ['eslint']
        "     " to see error location list
        "     " 每次自动调用 :SyntasticSetLocList, 将错误覆盖 **quickfix**
        "     let g:syntastic_always_populate_loc_list = 0
        "     " 自动拉起/关闭错误窗口, 不需要手动调用 :Errors
        "     let g:syntastic_auto_loc_list = 0
        "     let g:syntastic_loc_list_height = 5
        "     " 每次保存的时候做检查
        "     " let g:syntastic_check_on_wq = 0

        "     let g:syntastic_mode_map = {
        "         \ "mode": "passive",
        "         \ "active_filetypes": [],
        "         \ "passive_filetypes": ["javascript"] }

        "     ""let g:syntastic_javascript_jshint_conf = '~/.jshintrc'
        "     let g:syntastic_javascript_jshint_args = "--config ". expand("~/.jshintrc")
        "     let g:syntastic_javascript_jscs_args = "--config ". expand("~/.jscsrc")
        "     ""let g:syntastic_javascript_eslint_args = "--config ". expand("~/.eslintrc")
        "     function! ToggleErrors()
        "         let old_last_winnr = winnr('$')
        "         lclose
        "         if old_last_winnr == winnr('$')
        "             " Nothing was closed, open syntastic error location panel
        "             Errors
        "         endif
        "     endfunction
        "     nnoremap <Leader>y :call ToggleErrors()<cr>
        " endif

        " -> ale
        if isdirectory(expand("~/.vim/bundle/ale"))
            let g:ale_sign_error = '✗'
            let g:ale_sign_warning = '∆'
        endif
    endif

    " Setting for vcs Plugins
    if count(g:gsvim_bundle_groups, 'vcs')
        " -> Gitv Gitview Setting
        if isdirectory(expand("~/.vim/bundle/gitv"))
            let g:Gitv_OpenHorizontal = 1
            let g:Gitv_WrapLines = 1
        endif

        " -> GitGutter Setting
        if isdirectory(expand("~/.vim/bundle/vim-gitgutter"))
            let g:gitgutter_sign_column_always = 0
            let g:gitgutter_max_signs = 99999
        endif

        if isdirectory(expand("~/.vim/bundle/vim-signify"))
            let g:signify_vcs_list = [ 'hg', 'svn' ]
        endif
    endif

    " Setting for language specificity
    if count(g:gsvim_bundle_groups, 'language')
        " -> Emmet
        if isdirectory(expand("~/.vim/bundle/emmet-vim"))
            let g:user_emmet_leader_key='<C-Z>'
            " let g:user_emmet_settings={'indentation':'    '}
            let g:use_emmet_complete_tag=1
            " change <Tab> config , if use [YouCompleteMe]
            let g:user_emmet_expandabbr_key ='<Tab>'
            let g:user_emmet_settings = {
                    \ 'php'     : {
                    \ 'extends' : 'html',
                    \ 'filters' : 'c',
                    \ },
                    \ 'xml'     : {
                    \ 'extends' : 'html',
                    \ },
                    \ 'haml'    : {
                    \ 'extends' : 'html',
                    \ },
                    \ 'phtml'    : {
                    \ 'extends' : 'html',
                    \ }
                \}
        endif

        " -> javascript
        if isdirectory(expand("~/.vim/bundle/vim-javascript"))
            let g:javascript_plugin_jsdoc = 1
            " let g:javascript_conceal_function             = "ƒ"
            " let g:javascript_conceal_null                 = "ø"
            " let g:javascript_conceal_this                 = "@"
            " let g:javascript_conceal_return               = "⇚"
            " let g:javascript_conceal_undefined            = "¿"
            " let g:javascript_conceal_NaN                  = "ℕ"
            " let g:javascript_conceal_prototype            = "¶"
            " let g:javascript_conceal_static               = "•"
            " let g:javascript_conceal_super                = "Ω"
            " let g:javascript_conceal_arrow_function       = "⇒"
            " let g:javascript_conceal_noarg_arrow_function = "🞅"
            " let g:javascript_conceal_underscore_arrow_function = "🞅"
            map <leader>l :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
        endif
        " " -> JsBeautify
        " if isdirectory(expand("~/.vim/bundle/vim-jsbeautify"))
        "     " autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
        "     " " for html
        "     " autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
        "     " " for css or scss
        "     " autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
        "     " " for json
        "     " autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
        " endif
        " " -> JSON
        " ""nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
        if isdirectory(expand("~/.vim/bundle/vim-json"))
            let g:vim_json_syntax_conceal = 0
            let g:indentLine_noConcealCursor=""
        endif
    endif
" }

