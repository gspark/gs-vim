" Plugin Config {
    if count(g:gsvim_bundle_groups, 'ui')
        " -> gruvbox
        if isdirectory(g:plug_plugged . "/gruvbox")
            let g:gruvbox_italic = 1
        endif

        " -> onedark
        if isdirectory(g:plug_plugged . "/onedark.vim")
            if (has("nvim"))
                "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
                let $NVIM_TUI_ENABLE_TRUE_COLOR=1
            endif
            "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
            "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
            " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
            if (has("termguicolors"))
                set termguicolors
            endif
        endif

        " -> airline
        if isdirectory(g:plug_plugged . "/vim-airline")
            let g:airline_skip_empty_sections = 1
            let g:airline#extensions#tabline#enabled = 1
            " let g:airline#extensions#tmuxline#enabled = 1
            let g:airline#extensions#tabline#show_tabs = 1
            let g:airline#extensions#tabline#show_tab_nr = 1
            let g:airline#extensions#tabline#show_buffers = 1
            let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
            let g:airline#extensions#tabline#buffer_nr_show = 1
            " let g:airline#extensions#tabline#buffer_nr_format = '%s:'
            " let g:airline#extensions#tabline#fnamemod = ':t'
            " let g:airline#extensions#tabline#fnamecollapse = 1
            " let g:airline#extensions#tabline#fnametruncate = 0
            let g:airline#extensions#tabline#buffer_idx_mode = 1
            nmap <leader>1 <Plug>AirlineSelectTab1
            nmap <leader>2 <Plug>AirlineSelectTab2
            nmap <leader>3 <Plug>AirlineSelectTab3
            nmap <leader>4 <Plug>AirlineSelectTab4
            nmap <leader>5 <Plug>AirlineSelectTab5
            nmap <leader>6 <Plug>AirlineSelectTab6
            nmap <leader>7 <Plug>AirlineSelectTab7
            nmap <leader>8 <Plug>AirlineSelectTab8
            nmap <leader>9 <Plug>AirlineSelectTab9
            nmap <leader>- <Plug>AirlineSelectPrevTab
            nmap <leader>+ <Plug>AirlineSelectNextTab
            let g:Powerline_sybols = 'unicode'
            if g:gsvim_fancy_font
                let g:airline_powerline_fonts=1
                " let g:airline_left_sep = ''
                " let g:airline_left_alt_sep = ''
                " let g:airline_right_sep = ''
                " let g:airline_right_alt_sep = ''
                " let g:airline_symbols.branch = ''
                " let g:airline_symbols.readonly = ''
                " let g:airline_symbols.linenr = ''
                " let g:airline_symbols.maxlinenr= ''
            else
                let g:airline_left_sep = '▶'
                let g:airline_right_sep = '◀'
                let g:airline_symbols.crypt = '🔒'
                let g:airline_symbols.linenr = '¶'
                let g:airline_symbols.branch = '⎇'
                let g:airline_symbols.paste = '∥'
                let g:airline_symbols.notexists = '∄'
                let g:airline_symbols.whitespace = 'Ξ'
            endif
            " if exists("g:colors_name") && (g:colors_name=='gruvbox')
            "     let g:airline_theme = 'gruvbox'
            " else
            "     let g:airline_theme = 'bubblegum'
            " endif
            augroup Fix_airline_with_unite
                autocmd FileType unite AirlineRefresh
                autocmd FileType vimfiler AirlineRefresh
            augroup END
            ""let g:airline_section_y    = "%{strlen(&fenc)>0?&fenc:''}%{&bomb?'(BOM)':''}%{strlen(&ff)>0?'['.&ff.']':''}[ASCII=\%03.3b][HEX=\%02.2b]"
            let g:airline_section_y    = "%{strlen(&fenc)>0?&fenc:''}%{&bomb?'(BOM)':''}%{strlen(&ff)>0?'['.&ff.']':''}[ASCII=\%03.3b]"
        endif

        " -> lightline
        if isdirectory(g:plug_plugged . "/lightline.vim")
            let g:lightline = {
                \ 'active': {
                \   'left': [ ['mode', 'paste'],
                \             ['fugitive', 'readonly', 'filename', 'modified'] ],
                \   'right': [['percent', 'lineinfo'], ['charvalue', 'charvaluehex'], ['fileformat', 'fileencoding', 'filetype']]
                \ },
                \ 'component_function': {
                \   'mode': 'LightlineMode',
                \   'fileformat': 'LightlineFileformat',
                \   'filename': 'LightlineFilename',
                \   'filetype': 'LightlineFiletype',
                \   'fileencoding': 'LightlineFileEncoding'
                \ },
                \ 'component': {
                \   'lineinfo': '' . '%3l:%-2v%<',
                \   'charvalue': 'ASCII=%b', 
                \   'charvaluehex': 'HEX=0x%B',
                \   'readonly': '%{&filetype=="help"?"":&readonly?"🔒":""}',
                \   'modified': '%{&filetype=="help"?"":&modified?"+":&modifiable?"":"-"}',
                \   'fugitive': '%{exists("*FugitiveHead")?FugitiveHead():""}'
                \ },
                \ 'component_visible_condition': {
                \   'readonly': '(&filetype!="help"&& &readonly)',
                \   'modified': '(&filetype!="help"&&(&modified||!&modifiable))',
                \   'fugitive': '(exists("*FugitiveHead") && ""!=FugitiveHead())'
                \ },
                \ 'separator': { 'left': ' ', 'right': ' ' },
                \ 'subseparator': { 'left': ' ', 'right': ' ' }
                \ }

            function! LightlineReadonly()
                return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? '' : ''
            endfunction

            function! LightlineMode()
            return expand('%:t') =~# '^__Tagbar__' ? 'Tagbar':
                    \ expand('%:t') ==# 'ControlP' ? 'CtrlP' :
                    \ &filetype ==# 'unite' ? 'Unite' :
                    \ &filetype ==# 'vimfiler' ? 'VimFiler' :
                    \ &filetype ==# 'vimshell' ? 'VimShell' :
                    \ lightline#mode()
            endfunction

            function! LightlineFileformat()
                return winwidth(0) > 70 ? &fileformat : ''
            endfunction

            function! LightlineFilename()
                return &filetype ==# 'vimfiler' ? vimfiler#get_status_string() :
                    \ &filetype ==# 'unite' ? unite#get_status_string() :
                    \ &filetype ==# 'vimshell' ? vimshell#get_status_string() :
                    \ expand('%:t') !=# '' ? expand('%:t') : '[No Name]'
            endfunction

            function! LightlineFiletype()
                return winwidth(0) > 70 ? (&filetype !=# '' ? &filetype : 'no ft') : ''
            endfunction

            function! LightlineFileEncoding()
                return strlen(&fenc) > 0 ? &fenc : '' . &bomb ? '(BOM)' : ''
            endfunction

            let g:unite_force_overwrite_statusline = 0
            let g:vimfiler_force_overwrite_statusline = 0
            let g:vimshell_force_overwrite_statusline = 0
        endif


        " -> eleline.vim
        if isdirectory(g:plug_plugged . "/eleline.vim")
            let g:airline_powerline_fonts = 1
        endif


        " -> Indent Guides
        if isdirectory(g:plug_plugged . "/indentLine")
            if !has('gui_running') && g:gsvim_default_scheme
                let g:indent_guides_auto_colors=0
                autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=235
                autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235
            endif
            let g:indent_guides_enable_on_vim_startup=1
            let g:indent_guides_guide_size=1
            let g:indent_guides_default_mapping=0
            let g:indent_guides_exclude_filetypes=['help', 'nerdtree', 'startify', 'markdown']
        endif


        " -> Startify
        if isdirectory(g:plug_plugged . "/vim-startify")
            let g:startify_custom_header=[
                \'                          _            ',
                \'  __ _  ___       __   __(_) _ __ ___  ',
                \' / _` |/ __| _____\ \ / /| || `_ ` _ \ ',
                \'| (_| |\__ \|_____|\ V / | || | | | | |',
                \' \__, ||___/        \_/  |_||_| |_| |_|',
                \' |___/                                 ',
                \'                                       ']
            let g:startify_custom_footer =
                        \ ['', "   Vim is charityware. Please read ':help uganda'.", '']
            let g:startify_relative_path = 1
            let g:startify_skiplist = [
                        \ '.git',
                        \ '.svn',
                        \ 'node_modules',
                        \ 'logs',
                        \ 'bower_components'
                        \ ]
            let g:startify_session_dir = g:gsvim_temp . '/session'
            if has('gui_running')
                hi StartifyHeader  guifg=#87afff
                hi StartifyFooter  guifg=#87afff
                hi StartifyBracket guifg=#585858
                hi StartifyNumber  guifg=#ffaf5f
                hi StartifyPath    guifg=#8a8a8a
                hi StartifySlash   guifg=#585858
            else
                hi StartifyHeader  ctermfg=111
                hi StartifyFooter  ctermfg=111
                hi StartifyBracket ctermfg=240
                hi StartifyNumber  ctermfg=215
                hi StartifyPath    ctermfg=245
                hi StartifySlash   ctermfg=240
                ""        hi StartifyHeader  ctermfg=114
                ""        hi StartifyFooter  ctermfg=240
                ""        hi StartifyBracket ctermfg=240
                ""        hi StartifyNumber  ctermfg=215
                ""        hi StartifyPath    ctermfg=245
                ""        hi StartifySlash   ctermfg=240
                hi StartifySpecial ctermfg=240
            endif
        endif

        " -> Goyo & Limelight
        if isdirectory(g:plug_plugged . "/limelight.vim")
            autocmd! User GoyoEnter Limelight
            autocmd! User GoyoLeave Limelight!
        endif
    endif

    " Setting for enhancement Plugins
    if count(g:gsvim_bundle_groups, 'enhance')
        " -> delimitMate
        if isdirectory(g:plug_plugged . "/delimitMate")
            let delimitMate_expand_cr=1
            let delimitMate_expand_space=1
            let delimitMate_balance_matchpairs=1
        endif

        " -> Tcomment
        " if isdirectory(g:plug_plugged . "/tcomment_vim")
        "     " Map \<Space> to commenting
        "     function! IsWhiteLine()
        "         if (getline('.')=~'^$')
        "             exe 'TCommentBlock'
        "             normal! j
        "         else
        "             normal! A
        "             exe 'TCommentRight'
        "             normal! l
        "             normal! x
        "         endif
        "         startinsert!
        "     endfunction
        "     nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>
        " endif

        " -> Multiple cursors
        if isdirectory(g:plug_plugged . "/vim-multiple-cursors")
            " Called once right before you start selecting multiple cursors
            if g:gsvim_autocomplete=='NEO'
                function! Multiple_cursors_before()
                    if g:gsvim_completion_engine=='neocomplete'
                        exe 'NeoCompleteLock'
                    else
                        exe 'NeoComplCacheLock'
                    endif
                endfunction
                " Called once only when the multiple selection is canceled (default <Esc>)
                function! Multiple_cursors_after()
                    if g:gsvim_completion_engine=='neocomplete'
                        exe 'NeoCompleteUnlock'
                    else
                        exe 'NeoComplCacheUnlock'
                    endif
                endfunction
            endif
            let g:multi_cursor_next_key='<C-n>'
            let g:multi_cursor_prev_key='<C-p>'
            let g:multi_cursor_skip_key='<C-x>'
            let g:multi_cursor_quit_key='<Esc>'
        endif

        " -> Undo tree
        if isdirectory(g:plug_plugged . "/undotree")
            nnoremap <Leader>u :UndotreeToggle<CR>
            let g:undotree_SetFocusWhenToggle=1
        endif

        " -> Easy Align
        if isdirectory(g:plug_plugged . "/vim-easy-align")
            " xmap ga <Plug>(EasyAlign)
            " nmap ga <Plug>(EasyAlign)
            vmap <Leader>a <Plug>(EasyAlign)
            nmap <Leader>a <Plug>(EasyAlign)
            if !exists('g:easy_align_delimiters')
                let g:easy_align_delimiters = {}
            endif
            let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }
            " ,a=        对齐等号表达
            " ,a:        对齐冒号表达式(json/map等)

            " " 默认左对齐
            " ,a<space>  首个空格对齐
            " ,a2<space> 第二个空格对齐
            " ,a-<space> 倒数第一个空格对齐
            " ,a-2<space> 倒数第二个空格对齐
            " ,a*<space> 所有空格依次对齐
            " " 右对齐
            " ,a<Enter>*<space>
        endif

        " -> Gutentags
        if isdirectory(g:plug_plugged . "/vim-gutentags")
            let g:gutentags_cache_dir = g:gsvim_temp . '/cache/ctags'
        endif

        " -> Splitjoin
        if isdirectory(g:plug_plugged . "/splitjoin.vim")
            let g:splitjoin_split_mapping = ',s'
            let g:splitjoin_join_mapping  = ',j'
            let g:splitjoin_normalize_whitespace=1
            let g:splitjoin_align=1
        endif

        " -> Investigate.vim
        if isdirectory(g:plug_plugged . "/investigate.vim")
            nnoremap K :call investigate#Investigate()<CR>
            let g:investigate_use_dash=1
        endif

        " -> EnhancedDiff
        if isdirectory(g:plug_plugged . "/vim-diff-enhanced")
            let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
        endif

        " -> Tabularize
        if isdirectory(g:plug_plugged . "/tabular")
            nmap <Leader>a& :Tabularize /&<CR>
            vmap <Leader>a& :Tabularize /&<CR>
            nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
            nmap <Leader>a=> :Tabularize /=><CR>
            vmap <Leader>a=> :Tabularize /=><CR>
            nmap <Leader>a: :Tabularize /:<CR>
            vmap <Leader>a: :Tabularize /:<CR>
            nmap <Leader>a:: :Tabularize /:\zs<CR>
            vmap <Leader>a:: :Tabularize /:\zs<CR>
            nmap <Leader>a, :Tabularize /,<CR>
            vmap <Leader>a, :Tabularize /,<CR>
            nmap <Leader>a,, :Tabularize /,\zs<CR>
            vmap <Leader>a,, :Tabularize /,\zs<CR>
            nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
            vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
        endif

        " -> vim-commentary
        if isdirectory(g:plug_plugged . "/vim-commentary" )
            autocmd FileType python,shell set commentstring=#\ %s    " 设置Python注释字符
            autocmd FileType mako set cms=##\ %s
        endif
    endif

    " setting for moving Plugins
    if count(g:gsvim_bundle_groups, 'move')
        " -> Tag bar
        if isdirectory(g:plug_plugged . "/tagbar")
            let g:tagbar_autofocus     = 0
            let g:tagbar_expand        = 0
            let g:tagbar_foldlevel     = 1
            let g:tagbar_autoshowtag   = 1
            ""let g:tagbar_width       = 20     not usage
            nnoremap <Leader>t :TagbarToggle<CR>
        endif

        " -> Matchit
        " Start mathit
        packadd! matchit
        " Use Tab instead of % to switch
        nmap <Tab> %
        vmap <Tab> %
    endif

    " Setting for navigation Plugins
    if count(g:gsvim_bundle_groups, 'navigate')
        " -> NERD Tree
        if isdirectory(g:plug_plugged . "/nerdtree")
            nnoremap <Leader>f :NERDTreeToggle<CR>
            let NERDTreeChDirMode=2
            let NERDTreeShowBookmarks=1
            let NERDTreeShowHidden=1
            let NERDTreeShowLineNumbers=1
            augroup nerd_loader
                autocmd!
                autocmd VimEnter * silent! autocmd! FileExplorer
                autocmd BufEnter,BufNew *
                            \  if isdirectory(expand('<amatch>'))
                            \|   call plug#load('nerdtree')
                            \|   execute 'autocmd! nerd_loader'
                            \| endif
            augroup END
            " ColorFul NERDTree Settings
            let g:NERDTreeRespectWildIgnore=1
            let g:NERDTreeDirArrows=0
        endif
    endif

    " Setting for completion Plugins
    if count(g:gsvim_bundle_groups, 'complete')
        if g:gsvim_autocomplete=='NEO'
            " -> Neocomplete & Neocomplcache
            " Use Tab and S-Tab to select candidate
            inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
            inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
            if  g:gsvim_completion_engine == 'neocomplete'
                let g:neocomplete#data_directory= g:gsvim_temp . '/cache/neocomplete'
                let g:acp_enableAtStartup=0
                let g:neocomplete#enable_at_startup=1
                let g:neocomplete#enable_smart_case=1
                let g:neocomplete#enable_insert_char_pre=1
                let g:neocomplete#enable_multibyte_completion=1
                let g:neocomplete#sources#syntax#min_keyword_length=3
                let g:neocomplete#lock_buffer_name_pattern='\*ku\*'
                let g:neocomplete#enable_auto_select=0
                let g:neocomplete#enable_auto_delimiter=1
                let g:marching_enable_neocomplete=1
                let g:neocomplete#max_list=16
                let g:neocomplete#max_keyword_width=58
                let g:neocomplete#enable_fuzzy_completion = 1
                if !exists('g:neocomplete#keyword_patterns')
                        let g:neocomplete#keyword_patterns = {}
                endif
                let g:neocomplete#keyword_patterns['default']='\h\w*'
                " Use <C-E> to close popup
                inoremap <expr><C-E> neocomplete#cancel_popup()
                inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
                            \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
                            \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
            else
                let g:neocomplcache_enable_at_startup=1
                let g:neocomplcache_temporary_dir= g:gsvim_temp . '/cache/neocomplcache'
                let g:neocomplcache_enable_auto_delimiter=1
                let g:neocomplcache_enable_fuzzy_completion=1
                " Use <C-E> to close popup
                inoremap <expr><C-E> neocomplcache#cancel_popup()
                inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
                            \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
                            \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
            endif

            " Setting for specific language
            if has('lua')
                if !exists('g:neocomplete#force_omni_input_patterns')
                    let g:neocomplete#force_omni_input_patterns={}
                endif
                let g:neocomplete#force_omni_input_patterns.python=
                \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            else
                if !exists('g:neocomplcache_force_omni_patterns')
                    let g:neocomplcache_force_omni_patterns={}
                endif
                let g:neocomplcache_force_omni_patterns.python=
                \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
            endif
            autocmd FileType python setlocal omnifunc=jedi#completions
            let g:jedi#completions_enabled=0
            let g:jedi#auto_vim_configuration=0
            let g:jedi#smart_auto_mappings=0
            let g:jedi#use_tabs_not_buffers=1
            let g:tmuxcomplete#trigger=''
            " -> Neosnippet
            " Set information for snippets
            let g:neosnippet#enable_snipmate_compatibility=1
            let g:neosnippet#enable_complete_done = 1
            let g:neosnippet#completed_pairs= {}
            let g:neosnippet#completed_pairs.java = {'(' : ')'}
            if g:neosnippet#enable_complete_done
                let g:neopairs#enable = 0
            endif
            " Use <C-K> to expand or jump snippets in insert mode
            imap <C-K> <Plug>(neosnippet_expand_or_jump)
            " Use <C-K> to replace TARGET within snippets in visual mode
            xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
            """ For snippet_complete marker
            if has('conceal')
                set conceallevel=2 concealcursor=i
            endif
            " FileType Cheacker
            autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
            autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
            " autocmd FileType javascript setlocal omnifunc=javacriptcomplete#CompleteJS
            autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

            if !exists('g:neocomplete#sources#omni#input_patterns')
                    let g:neocomplete#sources#omni#input_patterns={}
            endif
            let g:neocomplete#ctags_command="ctags"
            let g:neocomplete#sources#omni#input_patterns.c='[^.[:digit:] *\t]\%(\.\|->\)'
            let g:neocomplete#sources#omni#input_patterns.cpp='[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::\w*'
        elseif g:gsvim_autocomplete=='COC'
            " Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
            " delays and poor user experience.
            set updatetime=300

            " Always show the signcolumn, otherwise it would shift the text each time
            " diagnostics appear/become resolved.
            set signcolumn=yes

            " Use tab for trigger completion with characters ahead and navigate.
            " NOTE: There's always complete item selected by default, you may want to enable
            " no select by `"suggest.noselect": true` in your configuration file.
            " NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
            " other plugin before putting this into your config.
            inoremap <silent><expr> <TAB>
                \ coc#pum#visible() ? coc#pum#next(1) :
                \ CheckBackspace() ? "\<Tab>" :
                \ coc#refresh()
            inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

            " Make <CR> to accept selected completion item or notify coc.nvim to format
            " <C-g>u breaks current undo, please make your own choice.
            inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                                        \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

            function! CheckBackspace() abort
                let col = col('.') - 1
                return !col || getline('.')[col - 1]  =~# '\s'
            endfunction

            " Use <c-space> to trigger completion.
            if has('nvim')
                inoremap <silent><expr> <c-space> coc#refresh()
            else
                inoremap <silent><expr> <c-@> coc#refresh()
            endif

            " Use `[g` and `]g` to navigate diagnostics
            " Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
            nmap <silent> [g <Plug>(coc-diagnostic-prev)
            nmap <silent> ]g <Plug>(coc-diagnostic-next)

            " GoTo code navigation.
            nmap <silent> gd <Plug>(coc-definition)
            nmap <silent> gy <Plug>(coc-type-definition)
            nmap <silent> gi <Plug>(coc-implementation)
            nmap <silent> gr <Plug>(coc-references)

            " Use K to show documentation in preview window.
            nnoremap <silent> K :call ShowDocumentation()<CR>

            function! ShowDocumentation()
                if CocAction('hasProvider', 'hover')
                    call CocActionAsync('doHover')
                else
                    call feedkeys('K', 'in')
                endif
            endfunction

            " Highlight the symbol and its references when holding the cursor.
            autocmd CursorHold * silent call CocActionAsync('highlight')

            " Symbol renaming.
            nmap <leader>rn <Plug>(coc-rename)

            " Formatting selected code.
            xmap <leader>f  <Plug>(coc-format-selected)
            nmap <leader>f  <Plug>(coc-format-selected)

            augroup mygroup
                autocmd!
                " Setup formatexpr specified filetype(s).
                autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
                " Update signature help on jump placeholder.
                autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
            augroup end

            " Applying codeAction to the selected region.
            " Example: `<leader>aap` for current paragraph
            xmap <leader>a  <Plug>(coc-codeaction-selected)
            nmap <leader>a  <Plug>(coc-codeaction-selected)

            " Remap keys for applying codeAction to the current buffer.
            nmap <leader>ac  <Plug>(coc-codeaction)
            " Apply AutoFix to problem on the current line.
            nmap <leader>qf  <Plug>(coc-fix-current)

            " Run the Code Lens action on the current line.
            nmap <leader>cl  <Plug>(coc-codelens-action)

            " Map function and class text objects
            " NOTE: Requires 'textDocument.documentSymbol' support from the language server.
            xmap if <Plug>(coc-funcobj-i)
            omap if <Plug>(coc-funcobj-i)
            xmap af <Plug>(coc-funcobj-a)
            omap af <Plug>(coc-funcobj-a)
            xmap ic <Plug>(coc-classobj-i)
            omap ic <Plug>(coc-classobj-i)
            xmap ac <Plug>(coc-classobj-a)
            omap ac <Plug>(coc-classobj-a)

            " Remap <C-f> and <C-b> for scroll float windows/popups.
            if has('nvim-0.4.0') || has('patch-8.2.0750')
                nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
                nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
                inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
                inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
                vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
                vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
            endif

            " Use CTRL-S for selections ranges.
            " Requires 'textDocument/selectionRange' support of language server.
            nmap <silent> <C-s> <Plug>(coc-range-select)
            xmap <silent> <C-s> <Plug>(coc-range-select)

            " Add `:Format` command to format current buffer.
            command! -nargs=0 Format :call CocActionAsync('format')

            " Add `:Fold` command to fold current buffer.
            command! -nargs=? Fold :call     CocAction('fold', <f-args>)

            " Add `:OR` command for organize imports of the current buffer.
            command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

            " Add (Neo)Vim's native statusline support.
            " NOTE: Please see `:h coc-status` for integrations with external plugins that
            " provide custom statusline: lightline.vim, vim-airline.
            set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

            " Mappings for CoCList
            " Show all diagnostics.
            nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
            " Manage extensions.
            nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
            " Show commands.
            nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
            " Find symbol of current document.
            nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
            " Search workspace symbols.
            nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
            " Do default action for next item.
            nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
            " Do default action for previous item.
            nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
            " Resume latest coc list.
            nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

            " 下划线标识。
            hi CocErrorHighlight cterm=underline gui=underline
            hi CocWarningHighlight cterm=underline gui=underline

            " coc-markdownlint
            nmap <silent> ml <Plug>(coc-codeaction))
        else
            " -> UltiSnips
            let g:UltiSnipsExpandTrigger="<C-K>"
            let g:UltiSnipsJumpForwardTrigger="<Tab>"
            let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
        endif

        " Setting info for snips
        let g:snips_author=g:gsvim_user
        let g:snips_email=g:gsvim_email
        let g:snips_github=g:gsvim_github

    endif

    " -> compiling Plugins
    if count(g:gsvim_bundle_groups, 'compile')
        " -> ale
        if isdirectory(g:plug_plugged . "/ale")
            let g:ale_sign_error = '✗'
            let g:ale_sign_warning = '∆'
            let g:ale_linters = {
                        \'javascript': ['eslint']
                        \}
            let g:ale_echo_msg_error_str = 'E'
            let g:ale_echo_msg_warning_str = 'W'
            let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
            "" let g:ale_fixers = {
            ""             \   'markdown': ['write-good'],
            ""             \}
        endif
    endif

    " Setting for vcs Plugins
    if count(g:gsvim_bundle_groups, 'vcs')
        " -> Gitv Gitview Setting
        if isdirectory(g:plug_plugged . "/gitv")
            let g:Gitv_OpenHorizontal = 1
            let g:Gitv_WrapLines = 1
        endif

        " -> GitGutter Setting
        if isdirectory(g:plug_plugged . "/vim-gitgutter")
            let g:gitgutter_sign_column_always = 0
            let g:gitgutter_max_signs = 99999
        endif

        if isdirectory(g:plug_plugged . "/vim-signify")
            let g:signify_vcs_list = [ 'hg', 'svn' ]
        endif
    endif

    " Setting for language specificity
    if count(g:gsvim_bundle_groups, 'language')
        " -> Emmet
        if isdirectory(g:plug_plugged . "/emmet-vim")
            " let g:user_emmet_leader_key='<C-Z>'
            imap hh <C-y>,
            " imap <expr> <tab> emmet#expandAbbrIntelligent("\<tab>")
            " let g:user_emmet_settings={'indentation':'    '}
            let g:use_emmet_complete_tag=1
            " change <Tab> config , if use [YouCompleteMe]
            " let g:user_emmet_expandabbr_key ='<Tab>'
            let g:user_emmet_settings = {
                    \ 'php'     : {
                    \ 'extends' : 'html',
                    \ 'filters' : 'c',
                    \ },
                    \ 'xml'     : {
                    \ 'extends' : 'html',
                    \ },
                    \ 'haml'    : {
                    \ 'extends' : 'html',
                    \ },
                    \ 'phtml'    : {
                    \ 'extends' : 'html',
                    \ }
                \}
        endif

        " -> javascript
        if isdirectory(g:plug_plugged . "/vim-javascript")
            let g:javascript_plugin_jsdoc = 1
            " let g:javascript_conceal_function             = "ƒ"
            " let g:javascript_conceal_null                 = "ø"
            " let g:javascript_conceal_this                 = "@"
            " let g:javascript_conceal_return               = "⇚"
            " let g:javascript_conceal_undefined            = "¿"
            " let g:javascript_conceal_NaN                  = "ℕ"
            " let g:javascript_conceal_prototype            = "¶"
            " let g:javascript_conceal_static               = "•"
            " let g:javascript_conceal_super                = "Ω"
            " let g:javascript_conceal_arrow_function       = "⇒"
            " let g:javascript_conceal_noarg_arrow_function = "🞅"
            " let g:javascript_conceal_underscore_arrow_function = "🞅"
            map <leader>l :exec &conceallevel ? "set conceallevel=0" : "set conceallevel=1"<CR>
        endif
        " " -> JsBeautify
        " if isdirectory(g:plug_plugged . "vim-jsbeautify")
        "     " autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
        "     " " for html
        "     " autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
        "     " " for css or scss
        "     " autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>
        "     " " for json
        "     " autocmd FileType json noremap <buffer> <c-f> :call JsonBeautify()<cr>
        " endif
        " " -> JSON
        " ""nmap <leader>jt <Esc>:%!python -m json.tool<CR><Esc>:set filetype=json<CR>
        if isdirectory(g:plug_plugged . "/vim-json")
            let g:vim_json_syntax_conceal = 0
            let g:indentLine_noConcealCursor=""
        endif
        " editorconfig
        if isdirectory(g:plug_plugged . "/editorconfig-vim")
            let g:EditorConfig_exclude_patterns = ['fugitive://.*']
        endif

        " go
        if isdirectory(g:plug_plugged . "/vim-go")
            let g:go_bin_path= "e:/opt/go/bin"
            let g:go_highlight_types = 1
            let g:go_highlight_fields = 1
            let g:go_highlight_functions = 1
            let g:go_highlight_methods = 1
            let g:go_highlight_operators = 1
            let g:go_highlight_extra_types = 1
            let g:go_highlight_build_constraints = 1
        endif

        " markdown
        if isdirectory(g:plug_plugged . "/vim-markdown")
            let g:vim_markdown_folding_disabled = 1
            " Enable TOC window auto-fit
            let g:vim_markdown_toc_autofit = 1
            " Highlight YAML front matter as used by Jekyll or Hugo
            let g:vim_markdown_frontmatter = 1
            " Highlight TOML front matter as used by Hugo
            " TOML syntax highlight requires vim-toml
            "" let g:vim_markdown_toml_frontmatter = 1

            " Highlight JSON front matter as used by Hugo
            " JSON syntax highlight requires vim-json
            let g:vim_markdown_json_frontmatter = 1
            " Do not require .md extensions for Markdown links
            let g:vim_markdown_no_extensions_in_markdown = 1
            "" disable conceal regardless of conceallevel
            let g:vim_markdown_conceal = 0
            "" disable math conceal with LaTeX math syntax enabled
            let g:tex_conceal = ""
            let g:vim_markdown_math = 1

            let g:vim_markdown_conceal_code_blocks = 0
        endif

        if isdirectory(g:plug_plugged . "/markdown-preview.vim")
            nmap <silent> <F8> <Plug>MarkdownPreview        " for normal mode
            imap <silent> <F8> <Plug>MarkdownPreview        " for insert mode
            nmap <silent> <F9> <Plug>StopMarkdownPreview    " for normal mode
            imap <silent> <F9> <Plug>StopMarkdownPreview    " for insert mode

        endif

        if isdirectory(g:plug_plugged . "/md-img-paste.vim")
            autocmd FileType markdown nmap <buffer><silent> <leader>p :call mdip#MarkdownClipboardImage()<CR>
            " there are some defaults for image directory and image name, you can change them
            " let g:mdip_imgdir = 'img'
            " let g:mdip_imgname = 'image'
        endif
    endif
" }

