" Environment {
    " Set directories
    function! InitializeDirectories()
        let parent=$TEMP
        let prefix='vim'
        let dir_list={
                    \ 'backup': 'backupdir',
                    \ 'view': 'viewdir',
                    \ 'swap': 'directory',
                    \ 'undo': 'undodir',
                    \ 'cache': '',
                    \ 'tmp': '',
                    \ 'session': ''}
        for [dirname, settingname] in items(dir_list)
            let directory=parent.'/'.prefix.'/'.dirname.'/'
            if !isdirectory(directory)
                if exists('*mkdir')
                    let dir = substitute(directory, "/$", "", "")
                    call mkdir(dir, 'p')
                else
                    echo 'Warning: Unable to create directory: '.directory
                endif
            endif
            if settingname!=''
                exec 'set '.settingname.'='.directory
            endif
        endfor
    endfunction
    call InitializeDirectories()

    " Windows Compatible {
        " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
        " across (heterogeneous) systems easier.
        if has('win32') || has('win64')
            "" let $PATH.=';' . expand("$VIM/bin") . ';d:/ops/python3' . ';d:/ops/python3/Scripts' . ';d:/ops/yarn/bin'
            let $PATH.=';' . expand("$VIM/bin") . ';' . expand("$VIM/lib") . ';d:\ops\python3' . ';d:\ops\python3\Scripts'
            "" let &pythonthreehome='d:\ops\python3'
            "" let &pythonthreedll='d:\ops\python3\python311.dll'
            "" set runtimepath^=$RUNTIME
            let &runtimepath=expand("$VIM/.vim") . ',' . &runtimepath
        endif
        " Be nice and check for multi_byte even if the config requires
        " multi_byte support most of the time
        if has("multi_byte")
            " Windows cmd.exe still uses cp850. If Windows ever moved to
            " Powershell as the primary terminal, this would be utf-8
            set termencoding=cp850
            " Let Vim use utf-8 internally, because many scripts require this
            set encoding=utf-8
            "" set rop=type:directx,gamma:1.0,contrast:0.5,level:1,geom:1,renmode:4,taamode:1
            set rop=type:directx,gamma:1.8,contrast:2.0,level:100,geom:1,renmode:5,taamode:1
            setglobal fileencoding=utf-8
            " Windows has traditionally used cp1252, so it's probably wise to
            " fallback into cp1252 instead of eg. iso-8859-15.
            " Newer Windows files might contain utf-8 or utf-16 LE so we might
            " want to try them first.
            set fileencodings=ucs-bom,utf-8,gb18030,gbk,cp936,utf-16le,cp1252,iso-8859-15
        endif
    " }
" }

"Options {
    let g:gsvim_user='gspark' " User name
    let g:gsvim_email='gspark@gmail.com' " User email
    let g:gsvim_github='https://github.com/gspark/gs-vim.git' " User github
    " gsvim UI setting
    let g:gsvim_default_scheme=1 " Enable color settings
    let g:gsvim_fancy_font=1 " Enable using fancy font
    let g:gsvim_show_number=1 " Enable showing number
    " gsvim Autocomplete setting (YCM or NEO or COC)
    "" let g:gsvim_autocomplete='NEO'
    "" let g:gsvim_autocomplete='DEO'
    let g:gsvim_autocomplete='COC'
    " gsvim plugin setting
    let g:gsvim_bundle_groups=['ui', 'enhance', 'move',
            \'complete', 'compile', 'vcs', 'language']
            "" \'navigate', 'complete', 'compile', 'vcs', 'language']
    "" let g:gs_vim_font='Consolas'                         " font
    "" let g:gs_vim_font='Ubuntu Mono derivative Powerline' " font
    "" let g:gs_vim_font='DejaVu Sans Mono for Powerline'   " font
    "" let g:gs_vim_font='FuraMono NF'                      " font
    "" let g:gs_vim_font='PragmataPro Mono'                 " font
    "" let g:gs_vim_font='Fira Code'                           " font
    let g:gs_vim_font='Sarasa-Mono-SC'                       " font

    let g:gsvim_temp                  = $TEMP . '/vim'
    let $PYLINTHOME                   = g:gsvim_temp . '/.pylint.d'
    let $TMPDIR                       = g:gsvim_temp . '/tmp'
    let $TMP                          = $TMPDIR
    let $TEMP                         = $TMPDIR
    let $XDG_CACHE_HOME               = g:gsvim_temp . '/cache'
    let g:startify_session_dir        = g:gsvim_temp . '/session'
    let g:unite_data_directory        = g:gsvim_temp . '/cache/unite'
    let g:neocomplete#data_directory  = g:gsvim_temp . '/cache/neocomplete'
    let g:neocomplcache_temporary_dir = g:gsvim_temp . '/cache/neocomplcache'
    "" let $XDG_CONFIG_HOME              = $HOME
    let g:plug_plugged                = $VIM . '/.vim/plugged'
    let g:coc_data_home = $VIM . '/.vim/.coc'
    let g:coc_config_home= $HOME

    set viminfo='50,<1000,s100,:0,n$TEMP/viminfo

" }

